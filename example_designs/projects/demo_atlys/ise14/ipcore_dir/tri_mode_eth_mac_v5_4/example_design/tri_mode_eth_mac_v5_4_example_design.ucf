# the part selection and associated pin choices (if any) are intended as 
# an example for the family selected.  Please refer to the User Guide
# for more information about IO selection.
# part selected is spartan6 xc6slx45csg324
CONFIG PART = xc6slx16csg324-2;

#
####
#######
##########
#############
#################
## System level constraints

########## GMII LOC CONSTRAINTS ##########
########## SP601 Board ##########
NET  clk_in_p        LOC = K15  | IOSTANDARD = LVDS_25  | DIFF_TERM = TRUE;
NET  clk_in_n        LOC = K16  | IOSTANDARD = LVDS_25  | DIFF_TERM = TRUE;

Net glbl_rst         LOC = N4   | IOSTANDARD = LVCMOS25 | TIG;

#### Module LEDs_8Bit constraints
Net frame_error      LOC = A4   | IOSTANDARD = LVCMOS25;
Net frame_errorn     LOC = C4   | IOSTANDARD = LVCMOS25;
Net activity_flash   LOC = C14  | IOSTANDARD = LVCMOS25;
Net activity_flashn  LOC = E13  | IOSTANDARD = LVCMOS25;

#### Module Push_Buttons_4Bit constraints
Net update_speed     LOC = P4   | IOSTANDARD = LVCMOS15;
Net config_board     LOC = F6   | IOSTANDARD = LVCMOS15;
Net pause_req_s      LOC = E4   | IOSTANDARD = LVCMOS15;
Net reset_error      LOC = F5   | IOSTANDARD = LVCMOS15;

#### Module DIP_Switches_4Bit constraints
Net mac_speed<0>     LOC = D14  | IOSTANDARD = LVCMOS25;
Net mac_speed<1>     LOC = E12  | IOSTANDARD = LVCMOS25;
Net gen_tx_data      LOC = F12  | IOSTANDARD = LVCMOS25;
Net chk_tx_data      LOC = V13  | IOSTANDARD = LVCMOS25 | TIG;

Net phy_resetn       LOC = L13  | IOSTANDARD = LVCMOS25 | TIG;

Net gmii_txd<0>      LOC = F8   | IOSTANDARD = LVCMOS25;
Net gmii_txd<1>      LOC = G8   | IOSTANDARD = LVCMOS25;
Net gmii_txd<2>      LOC = A6   | IOSTANDARD = LVCMOS25;
Net gmii_txd<3>      LOC = B6   | IOSTANDARD = LVCMOS25;
Net gmii_txd<4>      LOC = E6   | IOSTANDARD = LVCMOS25;
Net gmii_txd<5>      LOC = F7   | IOSTANDARD = LVCMOS25;
Net gmii_txd<6>      LOC = A5   | IOSTANDARD = LVCMOS25;
Net gmii_txd<7>      LOC = C5   | IOSTANDARD = LVCMOS25;
Net gmii_tx_en       LOC = B8   | IOSTANDARD = LVCMOS25;
Net gmii_tx_er       LOC = A8   | IOSTANDARD = LVCMOS25;
Net gmii_tx_clk      LOC = A9   | IOSTANDARD = LVCMOS25;
Net gmii_rxd<0>      LOC = M14  | IOSTANDARD = LVCMOS25;
Net gmii_rxd<1>      LOC = U18  | IOSTANDARD = LVCMOS25;
Net gmii_rxd<2>      LOC = U17  | IOSTANDARD = LVCMOS25;
Net gmii_rxd<3>      LOC = T18  | IOSTANDARD = LVCMOS25;
Net gmii_rxd<4>      LOC = T17  | IOSTANDARD = LVCMOS25;
Net gmii_rxd<5>      LOC = N16  | IOSTANDARD = LVCMOS25;
Net gmii_rxd<6>      LOC = N15  | IOSTANDARD = LVCMOS25;
Net gmii_rxd<7>      LOC = P18  | IOSTANDARD = LVCMOS25;
Net gmii_rx_dv       LOC = N18  | IOSTANDARD = LVCMOS25;
Net gmii_rx_er       LOC = P17  | IOSTANDARD = LVCMOS25;
Net gmii_rx_clk      LOC = L16  | IOSTANDARD = LVCMOS25 | PERIOD = 8000 ps;


# lock to unused header 
Net serial_response  LOC = A13  | IOSTANDARD = LVCMOS25;
Net tx_statistics_s  LOC = C13  | IOSTANDARD = LVCMOS25;
Net rx_statistics_s  LOC = C12  | IOSTANDARD = LVCMOS25;


#
####
#######
##########
#############
#################
#EXAMPLE DESIGN CONSTRAINTS

############################################################
# Clock Period Constraints                                 #
############################################################


############################################################
# RX Clock period Constraints                              #
############################################################
# Receiver clock period constraints: please do not relax
NET "gmii_rx_clk"                TNM_NET  = "clk_rx_int";
TIMESPEC "TS_rx_clk"       = PERIOD "clk_rx" 8000 ps HIGH 50 %;

NET "*/rx_mac_aclk_int"          TNM_NET  = "clk_rx";
############################################################
# TX Clock period Constraints                              #
############################################################
# Transmitter clock period constraints: please do not relax
NET "clk_in_p" TNM_NET = "clk_in_p";
TIMESPEC "TS_clk_in_p" = PERIOD "clk_in_p" 5.000 ns HIGH 50% INPUT_JITTER 50.0ps;

#set to use clock backbone - this uses a long route to allow the MMCM to be placed in the other half of the device
NET "clk_in_p" CLOCK_DEDICATED_ROUTE = BACKBONE;

NET "gtx_clk_bufg" TNM_NET = "clk_gtx";
TIMESPEC "TS_gtx_clk"      = PERIOD "clk_gtx" 8000 ps HIGH 50 %;




#
####
#######
##########
#############
#################
#AXI4-STREAM FIFO CONSTRAINTS

############################################################
# FIFO Clock Crossing Constraints                          #
############################################################
## TX Client FIFO
# Group the clock crossing signals into timing groups
INST "*user_side_FIFO/tx_fifo_i/rd_tran_frame_tog"              TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO/tx_fifo_i/rd_addr_txfer*"                 TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO/tx_fifo_i/rd_txfer_tog"                   TNM = "tx_fifo_rd_to_wr";

INST "*user_side_FIFO/tx_fifo_i/wr_frame_in_fifo"               TNM = "tx_fifo_wr_to_rd";

TIMESPEC "TS_tx_fifo_rd_to_wr"   = FROM "tx_fifo_rd_to_wr" TO "clk_gtx" 7800 ps DATAPATHONLY;
TIMESPEC "TS_tx_fifo_wr_to_rd"   = FROM "tx_fifo_wr_to_rd" TO clk_gtx 7800 ps DATAPATHONLY;

# Reduce clock period to allow for metastability settling time

# constrain the input to this register - this is a multicycle path due to the
# resync of the control
INST "*user_side_FIFO/tx_fifo_i/rd_addr_txfer*"                 TNM = "tx_addr_rd";
INST "*user_side_FIFO/tx_fifo_i/wr_rd_addr*"                    TNM = "tx_addr_wr";

TIMESPEC "TS_tx_fifo_addr"       = FROM "tx_addr_rd" TO "tx_addr_wr" 10ns;


## RX Client FIFO
# Group the clock crossing signals into timing groups
INST "*user_side_FIFO/rx_fifo_i/wr_store_frame_tog"             TNM = "rx_fifo_wr_to_rd";
INST "*user_side_FIFO/rx_fifo_i/rd_addr*"                       TNM = "rx_fifo_rd_to_wr";

TIMESPEC "TS_rx_fifo_wr_to_rd"   = FROM "rx_fifo_wr_to_rd" TO "clk_gtx" 7800 ps DATAPATHONLY;
TIMESPEC "TS_rx_fifo_rd_to_wr"   = FROM "rx_fifo_rd_to_wr" TO "clk_rx" 7800 ps DATAPATHONLY;




#
####
#######
##########
#############
#################
#BLOCK CONSTRAINTS

############################################################
# External GMII Constraints                                #
############################################################

# GMII Transmitter Constraints:  place flip-flops in IOB
INST "*trimac_block*gmii_interface*gmii_txd*"                     IOB = true;
INST "*trimac_block*gmii_interface*gmii_tx_en"                    IOB = true;
INST "*trimac_block*gmii_interface*gmii_tx_er"                    IOB = true;

# GMII Receiver Constraints:  place flip-flops in IOB
INST "*trimac_block*gmii_interface*rxd_to_mac*"                   IOB = true;
INST "*trimac_block*gmii_interface*rx_dv_to_mac"                  IOB = true;
INST "*trimac_block*gmii_interface*rx_er_to_mac"                  IOB = true;

############################################################
# The following are required to maximise setup/hold        #
############################################################

INST "gmii_txd*"                                                SLEW = FAST;
INST "gmii_tx_en"                                                 SLEW = FAST;
INST "gmii_tx_er"                                                 SLEW = FAST;
INST "gmii_tx_clk"                                                SLEW = FAST;



############################################################
# GMII: IODELAY Constraints
############################################################
# Please modify the value of the IDELAY_VALUE
# according to your design.
# For more information on IDELAYCTRL and IODELAY, please
# refer to the Spartan-6 User Guide.
#
INST "*trimac_block*gmii_interface*delay_gmii_rx_dv"              IDELAY_VALUE = 15;
INST "*trimac_block*gmii_interface*delay_gmii_rx_er"              IDELAY_VALUE = 15;
INST "*trimac_block*gmii_interface*delay_gmii_rxd"                IDELAY_VALUE = 15;

INST *trimac_block*gmii_interface*bufio_gmii_rx_clk               LOC = BUFIO2_X3Y13;
#INST *trimac_block*gmii_interface*bufg_gmii_rx_clk                LOC = BUFGMUX_X3Y5;

############################################################
# For Setup and Hold time analysis on GMII inputs          #
############################################################

# Identify GMII Rx Pads only.  
# This prevents setup/hold analysis being performed on false inputs,
# eg, the configuration_vector inputs.
INST "gmii_rxd*"  TNM = IN_GMII; 
INST "gmii_rx_er" TNM = IN_GMII;
INST "gmii_rx_dv" TNM = IN_GMII;

# The following constraints work in conjunction with IDELAY_VALUE settings to
# check that the GMII receive bus remains in alignment with the rising edge of
# GMII_RX_CLK, to within 2.7ns setup time and 50ps hold time. In addition to
# adjusting IDELAY_VALUE settings for your system's timing characteristics, you
# may wish to refine these constraints to match the GMII specification
# Note that implementation of the GMII physical interface on 
# Spartan-6 devices will not meet the GMII receiver timing specification; 
# see the provided data sheet and Answer Record 35336 on xilinx.com for details.
TIMEGRP "IN_GMII" OFFSET         = IN  2.6 ns VALID 2.7 ns BEFORE "gmii_rx_clk"; 



#
####
#######
##########
#############
#################
#CORE CONSTRAINTS



############################################################
# Crossing of Clock Domain Constraints: please do not edit #
############################################################
# Flow Control logic reclocking - control sugnal is synchronised
INST "*trimac_core*FLOW*PAUSE_REQ_TO_TX*"                        TNM="flow_rx_to_tx";
INST "*trimac_core*FLOW*PAUSE_VALUE_TO_TX*"                      TNM="flow_rx_to_tx";
TIMESPEC "TS_flow_rx_to_tx"      = FROM "flow_rx_to_tx" TO clk_gtx 7800 ps DATAPATHONLY;


# Ignore stats serialiser clock crossing as handled by toggle sync
INST "*x_stats_shift*"                                           TNM="sync_ok";
TIMESPEC "TS_rxstats_sync" = FROM "clk_rx" TO "sync_ok"          TIG;
TIMESPEC "TS_txstats_sync" = FROM "clk_tx_mac" TO "sync_ok"      TIG;

# Ignore pause deserialiser as only present to prevent logic stripping
INST "pause_val*"                                                TNM="pause_dsr";
INST "pause_req*"                                                TNM="pause_dsr";
TIMESPEC "TS_pause_dsr" = FROM "pause_dsr"                       TIG;





############################################################
# Ignore paths to resync flops
############################################################
INST "*/data_sync"                                                TNM = "resync_reg";
INST "*/reset_sync*"                                              TNM = "resync_reg";
TIMESPEC "ts_resync_flops"       = TO "resync_reg" TIG;



